User Management

    Command                          Description
sudo                        Execute command as a different user
su                          The su utility requests appropriate user credentials via PAM and switches to that user ID (the default user is the superuser). A shell is then executed.
useradd                     Creates a new user or update default new user information.
userdel                     Deletes a user account and related files.
usermod                     Modifies a user account.
addgroup                    Adds a group to the system.
delgroup                    Removes a group from the system.
passwd                      Changes user password.



Package Management

    - Features of packet management systems:

        - Package downloading
        - Dependency resolution
        - A standard binary package format
        - Common installation and configuration locations
        - Additional system-related configuration and functionality
        - Quality control

Command	        Description
dpkg	        The dpkg is a tool to install, build, remove, and manage Debian packages. The primary and more user-friendly front-end for dpkg is aptitude.
apt	            Apt provides a high-level command-line interface for the package management system.
aptitude	    Aptitude is an alternative to apt and is a high-level interface to the package manager.
snap	        Install, configure, refresh, and remove snap packages. Snaps enable the secure distribution of the latest apps and utilities for the cloud, servers, desktops, and the internet of things.
gem	            Gem is the front-end to RubyGems, the standard package manager for Ruby.
pip	            Pip is a Python package installer recommended for installing Python packages that are not available in the Debian archive. It can work with version control repositories (currently only Git, Mercurial, and Bazaar repositories), logs output extensively, and prevents partial installs by downloading all requirements before starting installation.
git	            Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.

Advanced Package Manager (APT)

    - Used by Kali and Parrot
    - Main repository can be found in /etc/apt/sources.list
    - Uses a database called APT cache
    - Used to provide information about packages installed on our system offline
    - Can search the APT cache to find packages related to certain programs.
        apt-cache search impacket
        apt-cache show impacket-scripts
    - Can list all installed packages
        apt list --installed


Services and Process Management

    - Two types of services
        - Internal: Relevant services that are required at system startup
        - User services installed by the user. Run in the background without user interaction. Also called daemons and have a d at the end of the program name. ex. sshd or systemd
    - Most linux distros have now switched to systemd. This daemon is an Init process started first and thus has the process ID 1
    - Monitors and takes care of the orderly starting and stopping of other services.
    - All process have an assigned PID that can be viewed under /proc/ with the corresponding number.    
    - Can also use update-rc.d to manage SysV innit script links

Systemctl

    - systemctl start <service> 
    - systemctl status <service>
    - systemctl enable <service>
        - Links this service after startup
        - Once we reboot the system, the OpenSSH server will auto run. We can check this using ps
    - systemctl list-units --type=service
        - Can use systemctl to list all service
    - Can utilize the journalctl -u ssh.service to view the logs to troubleshoot

Kill a Process

    - Processes can be in one of the following status:
        Running
        Waiting    (Waiting for an event or system resource)
        Stopped
        Zombie    (stopped by still has an entry in the process table)

    - Processes can be controlled using kill, pkill, pgrep, and killall
    - kill -l 
        - This will list all signals we can send to a process
Most commonly used

Signal	Description
1	SIGHUP - This is sent to a process when the terminal that controls it is closed.
2	SIGINT - Sent when a user presses [Ctrl] + C in the controlling terminal to interrupt a process.
3	SIGQUIT - Sent when a user presses [Ctrl] + D to quit.
9	SIGKILL - Immediately kill a process with no clean-up operations.
15	SIGTERM - Program termination.
19	SIGSTOP - Stop the program. It cannot be handled anymore.
20	SIGTSTP - Sent when a user presses [Ctrl] + Z to request for a service to suspend. The user can handle it afterward.


Background a Process

    - All background process can be displayed with the following command : jobs
    - CTRL + z can be used to suspend the processes and they will not be executed further. To keep it running in background, we have to enter the command
    bg to put the process in the background
    - Can automatically set the process with an AND sign (&) at the end of the command
        ping -c 10 www.hackthebox.eu &

Foreground a process

    - If we want to get the background process into the foreground and interact with it again, we can use the fg <ID> command.
        fg 1

Execute Multiple Commands

    - Three possibilities to run several commands, one after the other:

        Semicolon (;)            Command separator and executes the commands by ignoring previous commands results and errors
        Double ampersand characters (&&)            If there is an error in one of the commands, the following ones will not be executed anymore, and the whole process will be stopped.
        Pipes (|)               Relies on success from all in previous commands



Task Scheduling

    - Systemd
        - Service used to start processes and scripts at a specific time.
        - Can setup processes and scripts to run at a specific time or time interval and can also specify specific events and triggers that will trigger a specific task
        - Certain precations to take
            - Create a timer
            - Create a service
            - Activate the timer

    - Create a Timer
        - Create a directory where the timer script will be stored
            sudo mkdir /etc/systemd/myimter.timer.d
            sudo vim /etc/systemd/system/mytimer.timer
        - Create a script that configures the timer. Must containt the following options: "Unit" "Timer" "Install"
            Mytimer.timer

            [Unit]
            Description=My Timer

            [Timer]
            OnBootSec=3min
            OnUnitActiveSec=1hour

            [Install]
            WantedBy=timers.target

        - Create a Service
            sudo vim /etc/systemd/system/mytimer.service

            [Unit]
            Description=My Service

            [Service]
            ExecStart=/full/path/to/my/script.sh

            [Install]
            WantedBy=multi-user.target

        - Let systemd read the folders again to include the changes and Reload Systemd
            sudo systemctl daemon-reload

        - Start and enable autostart with systemctl
            sudo systemctl start mytimer.service
            sudo systemctl enable mytimer.service

        - Cron
            - Used to schedule and automate processes

            - To setup cron daemon:
                - Need to store the tasks in a file called crontab
                - Tell the daemon when to run the tasks
            - Structire of Cron consists of the following components

Time Frame	Description
Minutes (0-59)	        This specifies in which minute the task should be executed.
Hours (0-23)	        This specifies in which hour the task should be executed.
Days of month (1-31)	This specifies on which day of the month the task should be executed.
Months (1-12)	        This specifies in which month the task should be executed.
Days of the week (0-7)	This specifies on which day of the week the task should be executed.

            - Example Crontab

            # System Update
0 */6 * * /path/to/update_software.sh

# Execute scripts
0 0 1 * * /path/to/scripts/run_scripts.sh

# Cleanup DB
0 0 * * 0 /path/to/scripts/clean_database.sh

# Backups
0 0 * * 7 /path/to/scripts/backup.sh

            - System update should occur every sixth hour
            - execute scripts is to be executed every first day of the month at midnight
            - Cleanup DB is executed every Sunday at midnight
            - Backups is to be executed every Sunday at midnight.


        - Differences between Cron and Systemd
            - Systemd you need to create a timer and services script that tells the OS when to run the tasks
            - Cron you need to create a crontab that tells the cron Daemon when to run the tasks



Network Services

    - ssh
        - Allows the secure transmission of data and commands over a network
        - Most common SSH server is the OpenSSH server
        - Securely used for admin purposes

        - Install ssh
            sudo apt install openssh-server -y

        - Check server status
            systemctl status ssh

        - ssh logging in
            ssh user@<ipaddress>
            - Can be configured and customized by editing the file /etc/ssh/sshd_config with a text editor
            - Can adjust max number of concurrent connections, use of password or keys for logins, host key checking, etc.


    - NFS (Network Files System)
        - Allows us to store and manage files on remote systems as if they were stored on the local system
        - Enables easy and efficient mangement of files across networks
        - Admin use it to store and manage files centrally to enable easy collaboration and management of daya
        - NFS-UTILS (ubuntu), NFS-Ganesha (Solaris), OpenNFS (Redhat Linux)

        - Install NFS
            sudo apt install nfs-kernel-server -y

        - Check server status
            systemctl status nfs-kernel-server

        - Can Configure NFS via /etc/exports
            - Specifies which directories should be shared and the access rights for users and systems

            - Important access rights
Permissions	                        Description
rw	                Gives users and systems read and write permissions to the shared directory.
ro	                Gives users and systems read-only access to the shared directory.
no_root_squash	    Prevents the root user on the client from being restricted to the rights of a normal user.
root_squash	        Restricts the rights of the root user on the client to the rights of a normal user.
sync	            Synchronizes the transfer of data to ensure that changes are only transferred after they have been saved on the file system.
async	            Transfers data asynchronously, which makes the transfer faster, but may cause inconsistencies in the file system if changes have not been fully


        - Create NFS Share
            


    











