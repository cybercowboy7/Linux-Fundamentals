NAVIGATION

  - Common navigation commands
      - pwd
      - ls
      - ls -l (lists it vertically)
      - ls -la (list all, even hidden directories)
      - ls -li (Display file inodes)
        Breakdown
          |type and permissions| Number of hard links to the file/directory| Owner of file/directoy
          |Group owner of the file/directory| Size of the file| Date and time| Directory Name|


  - Working with Files and Directories
      - vim
      - nano
      - touch <name>
      - mkdir <name>
        -p : add a parent directory
      - tree .
      - mv : move and also rename files and directories
        - mv <file/directory> <renamed file/directory>
      - cp

  - Editing Files
      Nano
          - "^" stands for [CTRL} key. 

      VIM
          - Six modes 
            - Normal : All inputs are considered commands. 
            - Insert : All entered characters are inserted into the buffer
            - Visual : Mark a contiguous part of the text. Can then edit anyway you like or replace etc
            - Command : Allows single-line commands at the bottom of the editor.
            - Replace : Newly entered text will overwrite existing characters unless there are no more old characters
            - Ex : Can execute multiple commands sequentially without returning to Normal Mode after each command

  - Find Files and Directories
      - which
          - Returns the path to the file or link that should be executed. Allows us to determine if specific programs
like cURL, netcat wget, python, gcc, are available on the operating system.
          - If program does not exist, no results will be displayed.


      - find
          - Find files and folders. Can filter results. 
          - find <location> <options>
          - OPTIONS
              -type f
                  Define the type of the searched object. 
              -name *.conf
                  indicate the name of the file we are looking for. *.conf stands for all files with the .conf extension
              -user root
                  This option filters all files whose owner is the root user
              -size +20k
                  Filter all located files and specify that we only want to see the files that are larger than 20Kb
                  Can utilize -size +25k -size -28k to find files that are between 25k and 28k in size
              -newermt 2020-02-02
                  Set the date. Only files newer than the specified date will be presented
              -exec ls -al {} \;
                  Executes the specified command, using the curly brackets as placeholders for each result. The backslash
              escapes the next character from being interpreted by the shell because otherwise, the semicolon would 
              2>/dev/null
                  STDERR redirection to the 'null device'. This redirection ensures that no errors are displayed in the terminal. This redirection must 
              not be an option of the 'find' command.

      - locate
          - Quicker way to search through the systen
          - Works with a local DB that contains all information about existing files ad folders. 
          - Update the DB with the 'sudo updatedb' command.

    - File Descriptors and Redirections
        - FD is an indicator of connection maintained by the kernel to perform I/O operations. Windows based systems call it filehandle.
        - It is the connection (generally to a file) from the OS to perform I/O operations 
        - First 3 file descriptors in Linux are:

            - DATA STREAM FOR INPUT
                STDIN - 0

            - DATA STREAM FOR OUTPUT
                STDOUT - 1
                EXAMPLE:
                  find /etc/ -name shadow 2>/dev/null > results.txt
                    - This will pipe all errors to /dev/null while piping the remaining STDOUT to the results.txt file.
                  find /etc/ -name shadow 2> stderr.txt 1> stdout.txt  
                    - This will pipe STDERR to stderr.txt and STDOUT to stdout.txt

            - DATA STREAM FOR OUTPUT THAT RELATES TO AN ERROR OCCURRING
                STDERR - 2
                EXAMPLE:
                  find /etc/ -name shadow 2>/dev/null
                    - This will pipe all data streams related to errors to the /dev/null file to ensure a clean output

        - REDIRECT STDIN
            "from where" and "where to"
                cat < stdout.txt
                  - This uses the cat command to use the contents of the file stdout.txt as STDIN

        - REDIRECT STDOUT AND APPEND TO A FILE
            (>) is used to redirect STDOUT, a new file is automatically created if it does not already exist. If the file exists, it will
          be overwritten without asking for confirmation.

            (>>) This is used to append STDOUT to our existing file.

        - REDIRECT STADIN STREAM TO A FILE
            (<<) used to add our standard input through a stream. Can use End of File Function of a linux system
          this defines the input's end. 
              cat << EOF > stream.txt
                - Use the cat command to read our streaming input through the stream and direct it to a file called "stream.txt"

        - PIPES
            - Pipes are another way to redirect STDOUT
            - Grep is used to filter STDOUT according to the pattern we define.
            EXAMPLE:
                find /etc/ -name *.conf 2>/dev/null | grep systemd
                  - Use the find command to search for all files in the /etc/ directory with a .conf extension
                  - any errors are redirected to the null device
                  - using grep we filter out the results to only specify that only the lines containing the pattern systemd should be displayed

            EXAMPLE2:
                
                find /etc/ -name *.conf 2>/dev/null | grep systemd | wc -l 
                  - Same as above function
                  - We are going to redirect the output of the grepped information to the wc tool in order to display the total number of obtained results


    - Filter Contents
        - more
          - pager tool that allows us to scroll through the file in an interactive view

        - less
          - Output does not remain in the terminal like when more is utilized

        - head
          - Get the first lines of the file. Prints the first ten lines or input, in not specified otherwise.

        - Tail
          - Returns the last ten lines of a file

        - sort
          - Can sort results alphabeticallys or numerically to get a better overview
            cat /etc/password | sort

        - grep
          - Search for specific results that contain patterns that we defined
            cat /etc/passwd | grep "/bin/bash"
            cat /etc/passwd | grep -v "false\|nologin"    : the -v option excludes specific results in this case it excludes all users who have disabled the standard shell with the name "/bin/false" or "/usr/bin/nologin"

        - cut
          - This is used to remove specific delimiters and show the words on a line in a specified position. 
          - The -d is used in this case
            cat /etc/passwd | grep -v "false\|nologin" | cut -d":" -f1

        - Tr
          - To replace certain characters from a line with characters defined by us is the tool Tr
          - Define which character we want to replace, and as a second option, we define the character we want to replace it with.
          - Replace the colon character with space
            cat /etc/passwd | grep -v "false\|nologin" | tr ":" " " 

        - Column
          - Well suited to display such results in tabular form using the -t option
            cat /etc/passwd | grep -v "false\|nologin" | tr ":" " " | column -t

        - awk
          - Allows us to display the first ($1) and last ($NF) result of the line
            cat /etc/passwd | grep -v "false\|nologin" | tr ":" " " | awk '{print $1, $NF}'

        - sed
          - Stream editor can be used to substitue text
          - sed looks for patterns we have defined in the form of regular expressions (regex) and replaces them with another pattern that we have also defined.
          - Replace the work "bin" with "HTB"
            cat /etc/passwd | grep -v "false\|nologin" | tr ":" " " | awk '{print $1, $NF}' | sed 's/bin/HTB/g'
          - The "s" flag at the beginning stands for the substitute command. Then we specify the pattern we want to replace. After the slash (/), 
            we enter the pattern we want to use as a replacement in the third position. Finally, we use the "g" flag, which stands for replacing all matches.

        - Wc
          - Used to know how many successful matches we have. Use the -l option to specify only the lines are counted
            cat /etc/passwd | grep -v "false\|nologin" | tr ":" " " | awk '{print $1, $NF}' | wc -l


    - Regular Expressions

        - Regex is often used in web applications for the validatin of user input

        - Grouping
          Operators
            (a)              The round brackets are used to group parts of a regex. Within the brackets, you can define further patterns which should be processed together.

            [a-z]            The square brackets are used to define character classes. Inside the brackets, you can specify a list of characters to search for.

            {1, 10}          The curly brackets are used to define quantifiers. Inside the brackets, you can specify a number or a range that indicates how often a previous pattern should be repeated.

            |                	Also called the OR operator and shows results when one of the two expressions matches

            .*                Also called the AND operator and displayed results only if both expressions match
            


    - Permission Management

        - Permissions are assigned to users and groups. 

        - Cannot access a directory if you do not have execute permissions

        - To execute files within a directory, user needs execute permissions

        - To modify contents of a directory, the user needs write permissions

        - Three different types of permissions a file or directory can be assigned:

              (r) - Read
              (w) - Write
              (x) - Execute

        - Permissions can be set for the owner, group, and others

        - Permissions Breakdown

          - rwx rw- r--     1 root root 1641 May   4 23:42 /etc/passwd

              (From left to write)
                (-) file type (- = File, d = Directory, l = Link, ... )
                Permissions of the owner (read, write, execute)
                Permissions of the group (read, write)
                Permissinos of others (read)
                number of hard links
                user
                group
                file size
                date

        - Change permissions

          - use the chmod command
          - permissions group references (u - owner, g - Group, o - Others, a - All users), and either a [+] or [-] to add, remove the designated permissions

        - Octal Method
Binary Notation:                4 2 1  |  4 2 1  |  4 2 1
----------------------------------------------------------
Binary Representation:          1 1 1  |  1 0 1  |  1 0 0
----------------------------------------------------------
Octal Value:                      7    |    5    |    4
----------------------------------------------------------
Permission Representation:      r w x  |  r - x  |  r - -


        - Change Owner

          - Use the chown command
              chown <user>:<group> <file/directory>


        - SUID & SGID

          - Set User ID
          - Set Group ID
          - Allow users to run programs with the rights of another user
          - Admins use this to give their users rights for certain applications or files.
          - (s) is used instead of an (x). When executing such a program, the SUID/SGID of the file owner is used.
          SEE MORE ABOUT THIS @ https://gtfobins.github.io/gtfobins/journalctl/


        - Sticky Bits

          - This type of permission provides an extra layer of security when controlling the deletion and renaming of files within a directory.
          - Typically used on directories that are shared by multiple users to prevent on user form accidentally deleting or renaming files that are important to others.
          - Sticky bit is set on a directory, it is represented by the letter (t) in the execute permission of the directory's permissions.
          - No one other than the owner or root user can delete or rename the files or folders in the directory
          - If the sticky bit (T) is set, then this means that all other users do not have execute (x) permissions and, therefore, cannot see the contents of the folder nor run
          any programs from it.The lowercase sticky bit (t) is the sticky bit where the execute (x) permissions have been set.



  - Linux Containers

    - Installing LXC

        sudo apt-get install lxc lxc-utils -y

          

      



